{"version":3,"sources":["Pages/OpenShift/OpenShiftInfoButton.js","Pages/OpenShift/OpenShiftInfoCumilativeData.js","Pages/OpenShift/OpenShiftInfoCumilative.js","Pages/OpenShift/OpenShiftInfo.js","Pages/OpenStack/OpenStackInfoButton.js","Pages/OpenStack/OpenStackInfoCumilativeData.js","Pages/OpenStack/OpenStackInfoCumilative.js","Pages/OpenStack/OpenStackInfo.js","App.js","serviceWorker.js","index.js"],"names":["OpenShiftInfoButton","props","context","Component","OpenShiftInfoCumilativeData","this","labelName","labelValue","OpenShiftInfoCumilative","state","labelData","labelFields","console","log","map","value","key","OpenShiftInfo","OpenStackInfoButton","OpenStackInfoCumilativeData","OpenStackInfoCumilative","OpenStackInfo","horizontal","display","flexDirection","flexWrap","spacing","align","App","className","style","displayMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAgBeA,E,kDAbb,WAAYC,EAAOC,GAAU,uCACrBD,EAAOC,G,qDAGb,OACE,6BACE,mD,GAP0BC,aCkBnBC,E,uKAfX,OACE,6BACE,+BAASC,KAAKJ,MAAMK,UAApB,KACA,+BAASD,KAAKJ,MAAMM,WAApB,U,GALkCJ,aC+B3BK,E,kDA7Bb,WAAYP,EAAOC,GAAU,IAAD,8BAC1B,cAAMD,EAAOC,IACRO,MAAQ,CACXC,UAAW,CACT,aAAc,EACd,cAAe,EACf,iBAAkB,IAGtB,EAAKC,YAAc,CAAC,aAAc,cAAe,kBATvB,E,qDAWlB,IAAD,OAEP,OADAC,QAAQC,IAAIR,KAAKM,aAEf,6BACGN,KAAKM,YAAYG,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACEC,IAAKD,EACLT,UAAWS,EACXR,WAAY,EAAKE,MAAMC,UAAUK,a,GApBPZ,aCkBvBc,E,uKAfX,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GANoBd,aCWbe,E,kDAbb,WAAYjB,EAAOC,GAAU,uCACrBD,EAAOC,G,qDAGb,OACE,6BACE,oD,GAP0BC,aCmBnBgB,E,uKAfX,OACE,6BACE,+BAASd,KAAKJ,MAAMK,UAApB,KACA,+BAASD,KAAKJ,MAAMM,WAApB,U,GANkCJ,aC2B3BiB,E,kDA1Bb,WAAYnB,EAAOC,GAAU,IAAD,8BAC1B,cAAMD,EAAOC,IACRO,MAAQ,CACXC,UAAW,CACT,aAAc,EACd,cAAe,EACf,iBAAkB,KAGtB,EAAKC,YAAc,CAAC,aAAc,cAAe,kBATvB,E,qDAWlB,IAAD,OACP,OACE,6BACGN,KAAKM,YAAYG,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACET,UAAWS,EACXR,WAAY,EAAKE,MAAMC,UAAUK,a,GAlBPZ,aCgBvBkB,E,uKAXX,OAAO,6BACL,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALsBlB,aCAtBmB,EAAa,CACjBC,QAAS,OACTC,cAAe,MACfC,SAAU,OACVC,QAAS,MACTC,MAAQ,UA2BKC,E,uKAtBX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,gCACE,gDAKJ,yBAAKC,MAAOR,GACX,kBAAC,EAAD,CAAeS,eAAe,qBAC9B,kBAAC,EAAD,CAAeA,eAAe,2B,GAbrB5B,aCDE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.c921972f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass OpenShiftInfoButton extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n  render() {\n    return (\n      <div>\n        <button>Open Shift</button>\n      </div>\n    );\n  }\n}\n\n\nexport default OpenShiftInfoButton;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass OpenShiftInfoCumilativeData extends Component {\n  render() {\n    return (\n      <div>\n        <label>{ this.props.labelName } </label>\n        <label>{ this.props.labelValue } </label>\n      </div>\n    );\n  }\n}\n\nOpenShiftInfoCumilativeData.propTypes = {\n  labelName: PropTypes.string.isRequired,\n  labelValue: PropTypes.number.isRequired\n\n};\n\nexport default OpenShiftInfoCumilativeData\n;\n","import React, { Component } from \"react\";\n\nimport OpenShiftInfoCumilativeData from \"./OpenShiftInfoCumilativeData\";\n\nclass OpenShiftInfoCumilative extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      labelData: {\n        \"Total Pods\": 5,\n        \"Total Nodes\": 6,\n        \"Total Projects\": 7,\n      },\n    };\n    this.labelFields = [\"Total Pods\", \"Total Nodes\", \"Total Projects\"];\n  }\n  render() {\n    console.log(this.labelFields);\n    return (\n      <div>\n        {this.labelFields.map((value) => (\n          <OpenShiftInfoCumilativeData\n            key={value}\n            labelName={value}\n            labelValue={this.state.labelData[value]}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nOpenShiftInfoCumilative.propTypes = {};\n\nexport default OpenShiftInfoCumilative;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport OpenShiftInfoButton from \"./OpenShiftInfoButton\";\nimport OpenShiftInfoCumilative from \"./OpenShiftInfoCumilative\";\n\nclass OpenShiftInfo extends Component {\n  render() {\n    return (\n      <div>\n        <OpenShiftInfoButton/>\n        \n        <OpenShiftInfoCumilative/>\n        \n      </div>\n    );\n  }\n}\n\nOpenShiftInfo.propTypes = {\n  displayMessage: PropTypes.string.isRequired,\n};\n\nexport default OpenShiftInfo;\n","import React, { Component } from \"react\";\n\nclass OpenStackInfoButton extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n  render() {\n    return (\n      <div>\n        <button>Open Stack </button>\n      </div>\n    );\n  }\n}\n\n\nexport default OpenStackInfoButton;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass OpenStackInfoCumilativeData extends Component {\n  \n  render() {\n    return (\n      <div>\n        <label>{ this.props.labelName } </label>\n        <label>{ this.props.labelValue } </label>\n      </div>\n    );\n  }\n}\n\nOpenStackInfoCumilativeData.propTypes = {\n  labelName: PropTypes.string.isRequired,\n  labelValue: PropTypes.number.isRequired\n\n};\n\nexport default OpenStackInfoCumilativeData\n;\n","import React, { Component } from \"react\";\nimport OpenStackInfoCumilativeData from \"./OpenStackInfoCumilativeData\";\n\nclass OpenStackInfoCumilative extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      labelData: {\n        \"Total Pods\": 8,\n        \"Total Nodes\": 9,\n        \"Total Projects\": 10,\n      },\n    };\n    this.labelFields = [\"Total Pods\", \"Total Nodes\", \"Total Projects\"];\n  }\n  render() {\n    return (\n      <div>\n        {this.labelFields.map((value) => (\n          <OpenStackInfoCumilativeData\n            labelName={value}\n            labelValue={this.state.labelData[value]}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\n\nexport default OpenStackInfoCumilative;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport OpenStackInfoButton from \"./OpenStackInfoButton\";\nimport OpenStackInfoCumilative from \"./OpenStackInfoCumilative\";\n\nclass OpenStackInfo extends Component {\n  \n  render() {\n    return <div>\n      <OpenStackInfoButton/>\n      <OpenStackInfoCumilative/>\n    </div>;\n  }\n}\n\nOpenStackInfo.propTypes = {\n  displayMessage: PropTypes.string.isRequired,\n};\n\nexport default OpenStackInfo;\n","import React, { Component } from \"react\";\nimport OpenShiftInfo from \"./Pages/OpenShift/OpenShiftInfo\";\nimport OpenStackInfo from \"./Pages/OpenStack/OpenStackInfo\";\n// import { Route, Switch } from \"react-router-dom\";\n\nconst horizontal = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  spacing: \"50%\",\n  align : \"center\"\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <center>\n            <h1>OPS Dashboard </h1>\n          </center>\n        </header>\n\n     \n        <div style={horizontal}>\n         <OpenStackInfo displayMessage=\"APP -> OpenStack\" />\n         <OpenShiftInfo displayMessage=\"APP -> OpenShift\" />\n        </div>\n       \n\n      </div>\n    );\n  }\n  \n\n}\n\nexport default App;\n// {\n//   return (\n//     <Switch>\n//       <Route exact path=\"/\" component={home} />\n//       <Route path=\"./Openstackmain\" component={Openstackmain} />\n//       <Route path=\"./Openshiftmain\" component={Openshiftmain} />\n//     </Switch>\n//   );\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}